// ==UserScript==
// @name         Linkum Auto Task Taker (Persistent Loop)
// @namespace    https://yourdomain.local/
// @version      1.4
// @description  –ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π —Ü–∏–∫–ª: –±–µ—Ä–µ—Ç –∑–∞–¥–∞–Ω–∏—è –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É, –ø–æ–∫–∞ –Ω–µ –Ω–∞–∂–∞—Ç–∞ "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å" (—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –º–µ–∂–¥—É –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞–º–∏)
// @author       –¢—ã
// @match        https://linkum.ru/user/crowd/*
// @icon         https://linkum.ru/favicon.ico
// @run-at       document-end
// @grant        none
// ==/UserScript==

(function () {
  'use strict';

  // üîí –ó–∞—â–∏—Ç–∞ –æ—Ç –≤—Å–ø–ª—ã–≤–∞—é—â–∏—Ö –æ–∫–æ–Ω
  window.alert = () => {};
  window.confirm = () => true;
  window.prompt = () => '';

  const MIN_ORDER_ID = 2555605;
  const sleep = ms => new Promise(resolve => setTimeout(resolve, ms));

  // üß† –§–ª–∞–≥ –∑–∞–ø—É—Å–∫–∞ —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ localStorage
  const STORAGE_KEY = 'linkum_auto_task_running';
  let running = localStorage.getItem(STORAGE_KEY) === 'true';

  const setRunning = (value) => {
    running = value;
    localStorage.setItem(STORAGE_KEY, value ? 'true' : 'false');
  };

  const getTasksToTake = () => {
    return [...document.querySelectorAll("#orders tr")].map(row => {
      const cells = row.querySelectorAll("td");
      const orderId = parseInt(cells?.[0]?.innerText?.trim(), 10);
      const button = cells?.[5]?.querySelector(".crowd_task");
      return orderId > MIN_ORDER_ID && button ? { orderId, button } : null;
    }).filter(Boolean);
  };

  const takeAllTasks = async () => {
    const tasks = getTasksToTake();
    if (tasks.length === 0) {
      console.log('[‚è≥] –ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∑–∞–¥–∞–Ω–∏–π...');
      return;
    }

    for (const { orderId, button } of tasks) {
      if (!running) return;
      try {
        button.click();
        console.log(`[‚úî] –û—Ç–∫—Ä—ã—Ç–∏–µ –∑–∞–¥–∞–Ω–∏—è ${orderId}`);
        await sleep(1000);

        for (let i = 0; i < 10; i++) {
          const confirmButton = document.querySelector("#post_type");
          if (confirmButton) {
            confirmButton.click();
            console.log(`[üöÄ] –ó–∞–¥–∞–Ω–∏–µ ${orderId} –≤–∑—è—Ç–æ`);
            break;
          }
          await sleep(300);
        }
      } catch (err) {
        console.error(`[‚ùå] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–¥–∞–Ω–∏–∏ ${orderId}:`, err);
      }
      await sleep(1000);
    }
  };

  const startLoop = async () => {
    while (running) {
      await takeAllTasks();
      if (!running) return;
      console.log('[üîÑ] –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É...');
      await sleep(1000);
      if (!running) return;
      location.reload(); // –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É ‚Äî –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
    }
  };

  const createToggleButton = () => {
    const btn = document.createElement('button');
    btn.id = 'linkum-autotake-toggle';
    btn.textContent = running ? '‚èπ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å' : '‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å';
    btn.style.cssText = `
      position: fixed;
      bottom: 20px;
      right: 20px;
      z-index: 10000;
      background: #007bff;
      color: white;
      border: none;
      border-radius: 5px;
      font-size: 14px;
      cursor: pointer;
      box-shadow: 0 2px 6px rgba(0,0,0,0.3);
    `;
    btn.onclick = () => {
      setRunning(!running);
      btn.textContent = running ? '‚èπ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å' : '‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å';
      if (running) {
        console.log('[‚ñ∂Ô∏è] –°–∫—Ä–∏–ø—Ç –∑–∞–ø—É—â–µ–Ω, —Ä–∞–±–æ—Ç–∞–µ—Ç –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ...');
        startLoop();
      } else {
        console.log('[‚èπ] –°–∫—Ä–∏–ø—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.');
      }
    };
    document.body.appendChild(btn);
  };

  window.addEventListener('load', () => {
    createToggleButton();
    if (running) {
      console.log('[‚ö°] –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏...');
      startLoop();
    }
  });
})();
