// ==UserScript==
// @name         Linkum Auto Task Taker + UI Control
// @namespace    https://yourdomain.local/
// @version      1.1
// @description  –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –±–µ—Ä–µ—Ç –∑–∞–¥–∞–Ω–∏—è –Ω–∞ Linkum.ru —Å –∫–Ω–æ–ø–∫–æ–π –°—Ç–∞—Ä—Ç/–°—Ç–æ–ø
// @author       –¢—ã
// @match        https://linkum.ru/user/crowd/*
// @icon         https://linkum.ru/favicon.ico
// @run-at       document-end
// @grant        none
// ==/UserScript==

(function () {
  'use strict';

  // üîí –ó–∞—â–∏—Ç–∞ –æ—Ç –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
  window.alert = () => {};
  window.confirm = () => true;
  window.prompt = () => '';

  const MIN_ORDER_ID = 2555605;
  const MAX_TASKS_PER_CYCLE = 10;
  const sleep = ms => new Promise(resolve => setTimeout(resolve, ms));
  let running = false;

  const getTasksToTake = () => {
    return [...document.querySelectorAll("#orders tr")].map(row => {
      const cells = row.querySelectorAll("td");
      const orderId = parseInt(cells?.[0]?.innerText?.trim(), 10);
      const button = cells?.[5]?.querySelector(".crowd_task");
      return orderId > MIN_ORDER_ID && button ? { orderId, button } : null;
    }).filter(Boolean);
  };

  const takeTask = async ({ orderId, button }) => {
    try {
      button.click();
      console.log(`[‚úî] –û—Ç–∫—Ä—ã—Ç–∏–µ –∑–∞–¥–∞–Ω–∏—è ${orderId}`);
      await sleep(1500);

      for (let i = 0; i < 10; i++) {
        const confirmButton = document.querySelector("#post_type");
        if (confirmButton) {
          confirmButton.click();
          console.log(`[üöÄ] –ó–∞–¥–∞–Ω–∏–µ ${orderId} –≤–∑—è—Ç–æ –≤ —Ä–∞–±–æ—Ç—É`);
          return;
        }
        await sleep(500);
      }

      console.warn(`[‚ö†] –ö–Ω–æ–ø–∫–∞ "–í–∑—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è ${orderId}`);
    } catch (err) {
      console.error(`[‚ùå] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–¥–∞–Ω–∏—è ${orderId}:`, err);
    }
  };

  const processLoop = async () => {
    while (running) {
      const tasks = getTasksToTake();

      if (tasks.length === 0) {
        console.log('[‚è≥] –ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∑–∞–¥–∞–Ω–∏–π. –ñ–¥–µ–º 10 —Å–µ–∫—É–Ω–¥...');
        await sleep(10000);
        if (!running) return;
        location.reload();
        return;
      }

      for (const task of tasks.slice(0, MAX_TASKS_PER_CYCLE)) {
        if (!running) return;
        await takeTask(task);
        await sleep(2000);
      }

      console.log('[üîÑ] –¶–∏–∫–ª –∑–∞–≤–µ—Ä—à–µ–Ω. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã...');
      await sleep(3000);
      if (!running) return;
      location.reload();
    }
  };

  const createToggleButton = () => {
    const btn = document.createElement('button');
    btn.id = 'linkum-autotake-toggle';
    btn.textContent = '‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å';
    btn.style.cssText = `
      position: fixed;
      bottom: 20px;
      right: 20px;
      z-index: 10000;
      background: #007bff;
      color: white;
      border: none;
      border-radius: 5px;
      font-size: 14px;
      cursor: pointer;
      box-shadow: 0 2px 6px rgba(0,0,0,0.3);
    `;
    btn.onclick = () => {
      running = !running;
      btn.textContent = running ? '‚èπ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å' : '‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å';
      if (running) {
        console.log('[‚ñ∂Ô∏è] –ó–∞–ø—É—Å–∫ –ø–æ–¥–±–æ—Ä–∞ –∑–∞–¥–∞–Ω–∏–π...');
        processLoop();
      } else {
        console.log('[‚èπ] –ü–æ–¥–±–æ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.');
      }
    };
    document.body.appendChild(btn);
  };

  window.addEventListener('load', () => {
    createToggleButton();
  });
})();
